# Generated by Django 3.1.7 on 2021-04-12 15:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date time on which the object was created.', verbose_name='created att')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date time on which the object was modified.', verbose_name='modified att')),
                ('text', models.TextField(validators=[django.core.validators.MinLengthValidator(3, 'Comment must be greater than 3 characters')])),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'get_latest_by': 'created_at',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fav',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date time on which the object was created.', verbose_name='created att')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date time on which the object was modified.', verbose_name='modified att')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date time on which the object was created.', verbose_name='created att')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date time on which the object was modified.', verbose_name='modified att')),
                ('title', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(2, 'Title must be greater than 2 characters')])),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('image', models.BinaryField(blank=True, editable=True, null=True)),
                ('content_type', models.CharField(blank=True, help_text='The MIMEType of the file', max_length=256, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comments', models.ManyToManyField(related_name='comments_owned', through='posts.Comment', to=settings.AUTH_USER_MODEL)),
                ('favorites', models.ManyToManyField(related_name='favorite_ads', through='posts.Fav', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
            },
        ),
        migrations.AddField(
            model_name='fav',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post'),
        ),
        migrations.AddField(
            model_name='fav',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post'),
        ),
        migrations.AlterUniqueTogether(
            name='fav',
            unique_together={('post', 'user')},
        ),
    ]
